#lang dssl2

# HW2: Stacks and Queues

let eight_principles = ["Know your rights.",
    "Acknowledge your sources.",
    "Protect your work.",
    "Avoid suspicion.",
    "Do your own work.",
    "Never falsify a record or permit another person to do so.",
    "Never fabricate data, citations, or experimental results.",
    "Always tell the truth when discussing your work with your instructor."]

import ring_buffer

interface STACK[T]:
    def push(self, element: T) -> NoneC
    def pop(self) -> T
    def empty?(self) -> bool?

# Defined in the `ring_buffer` library; copied here for reference.
# Do not uncomment! or you'll get errors.
# interface QUEUE[T]:
#     def enqueue(self, element: T) -> NoneC
#     def dequeue(self) -> T
#     def empty?(self) -> bool?

# Linked-list node struct (implementation detail):
struct _cons:
    let data
    let next: OrC(_cons?, NoneC)

###
### ListStack
###

class ListStack[T] (STACK):
    let top
    let size

    # Constructs an empty ListStack.
    def __init__ (self):
        self.top = None
        self.size = 0

    def push(self, element):
        if self.empty?():
            self.top = _cons(element, None)  
        else:
            let newNode = _cons(element, self.top)
            self.top = newNode
        self.size = self.size + 1   
        return
        
    def pop(self):
        if self.empty?():
            error('cannot remove from empty stack')
        else:
            let popped = self.top
            self.top = self.top.next
            self.size = self.size - 1
            return popped.data
            
        
    def empty?(self):
        return self.size == 0

test "Stack test":
    let s = ListStack()
    s.push(2)
    assert s.pop() == 2
    
    let stk = ListStack()
    #testing push
    stk.push(1)
    stk.push(2)
    stk.push(3)
    #testing pop, lifo
    assert stk.pop() == 3
    stk.push(4)
    assert stk.pop() == 4
    assert stk.pop() == 2
    assert stk.pop() == 1
    #testing error: pop empty stack
    assert_error stk.pop()
    
    #testing empty
    assert stk.empty?() == True
    stk.push(1)
    assert stk.empty?() == False
    
###
### ListQueue
###

class ListQueue[T] (QUEUE):
    let head
    let tail
    let size

    # Constructs an empty ListQueue.
    def __init__ (self):
        self.head = None
        self.tail = None
        self.size = 0
        

    def enqueue(self, element):
        if self.empty?():
            self.head = _cons(element, None)
            self.tail = self.head
        else:
            let temp = _cons(element, None)
            self.tail.next = temp
            self.tail = temp
        self.size = self.size + 1
        return
        
        
    def dequeue(self):
        if self.empty?():
            error('cannot remove from empty queue')
        else:
            let temp = self.head
            self.head = self.head.next
            self.size = self.size - 1
            return temp.data
            
    def empty?(self):
        return self.size == 0
        
        
test "Queue Test":
    let q = ListQueue()
    #testing enqueue
    q.enqueue(2)
    q.enqueue(3)
    q.enqueue(4)
    #testing dequeue, fifo
    assert q.dequeue() == 2
    assert q.dequeue() == 3
    #testing empty
    assert q.empty?() == False
    assert q.dequeue() == 4
    
    #testing error: dequeue empty queue
    assert_error q.dequeue()
    
    assert q.empty?() == True

###
### Playlists
###

struct song:
    let title: str?
    let artist: str?
    let album: str?

# Enqueue six songs of your choice to the given queue, then return the first
# song that should play.
def fill_playlist (q: QUEUE!):
    q.enqueue(song("Paris", "Taylor Swift", "Midnights (3am Edition)"))
    q.enqueue(song("ivy", "Taylor Swift", "Evermore"))
    q.enqueue(song("Daylight", "Taylor Swift", "Lover"))
    q.enqueue(song("Getaway Car", "Taylor Swift", "Reputation"))
    q.enqueue(song("New Romantics", "Taylor Swift", "1989 (Deluxe Edition)"))
    q.enqueue(song("Begin Again", "Taylor Swift", "Red"))
    return q.dequeue()

test "ListQueue playlist":
    let q = ListQueue()
    assert fill_playlist(q) == (song("Paris", "Taylor Swift", "Midnights (3am Edition)"))
    assert fill_playlist(q) == (song("ivy", "Taylor Swift", "Evermore"))

# To construct a RingBuffer: RingBuffer(capacity)
test "RingBuffer playlist":
    let rb = RingBuffer(100)
    assert fill_playlist(rb) == (song("Paris", "Taylor Swift", "Midnights (3am Edition)"))
    assert fill_playlist(rb) == (song("ivy", "Taylor Swift", "Evermore"))    
    
