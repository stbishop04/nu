#lang dssl2

# HW4: Graph

import cons
import 'hw4-lib/dictionaries.rkt'
import sbox_hash

let eight_principles = ["Know your rights.",
    "Acknowledge your sources.",
    "Protect your work.",
    "Avoid suspicion.",
    "Do your own work.",
    "Never falsify a record or permit another person to do so.",
    "Never fabricate data, citations, or experimental results.",
    "Always tell the truth when discussing your work with your instructor."]


###
### REPRESENTATION
###


# A Vertex is a natural number.
let Vertex? = nat?

# A VertexList is either
#  - None, or
#  - cons(v, vs), where v is a Vertex and vs is a VertexList
let VertexList? = Cons.ListC[Vertex?]

# A Weight is a real number. (It’s a number, but it’s neither infinite
# nor not-a-number.)
let Weight? = AndC(num?, NotC(OrC(inf, -inf, nan)))

# An OptWeight is either
# - a Weight, or
# - None
let OptWeight? = OrC(Weight?, NoneC)

# A WEdge is WEdge(Vertex, Vertex, Weight)
struct WEdge:
    let u: Vertex?
    let v: Vertex?
    let w: Weight?
  

# A WEdgeList is either
#  - None, or
#  - cons(w, ws), where w is a WEdge and ws is a WEdgeList
let WEdgeList? = Cons.ListC[WEdge?]

# A weighted, undirected graph ADT.
interface WUGRAPH:

    # Returns the number of vertices in the graph. (The vertices
    # are numbered 0, 1, ..., k - 1.)
    def len(self) -> nat?

    # Sets the weight of the edge between u and v to be w. Passing a
    # real number for w updates or adds the edge to have that weight,
    # whereas providing providing None for w removes the edge if
    # present. (In other words, this operation is idempotent.)
    def set_edge(self, u: Vertex?, v: Vertex?, w: OptWeight?) -> NoneC

    # Gets the weight of the edge between u and v, or None if there
    # is no such edge.
    def get_edge(self, u: Vertex?, v: Vertex?) -> OptWeight?

    # Gets a list of all vertices adjacent to v. (The order of the
    # list is unspecified.)
    def get_adjacent(self, v: Vertex?) -> VertexList?

    # Gets a list of all edges in the graph, in an unspecified order.
    # This list only includes one direction for each edge. For
    # example, if there is an edge of weight 10 between vertices
    # 1 and 3, then exactly one of WEdge(1, 3, 10) or WEdge(3, 1, 10)
    # will be in the result list, but not both.
    def get_all_edges(self) -> WEdgeList?

class WuGraph (WUGRAPH):
    let _adjMatrix
    let _size
    
    def _helpCreateMatrix(self, size):
        let temp = vec(size)
        for i in range(size):
            temp[i] = vec(size)
        return temp
        
    #DELETE LATER PLEASE
    #
    #   
    def printHelp(self):
        for i in range(self._size):
            println(i + ": " + self._adjMatrix[i])
            

    def __init__(self, size: nat?):
        self._size = size
        self._adjMatrix = self._helpCreateMatrix(size)
    
    def len(self):
        return self._size
        
    def set_edge(self, u, v, w):
        if u > self._size or v > self._size or u < 0 or v < 0:
            error('out of bounds')
        self._adjMatrix[u][v] = w
        self._adjMatrix[v][u] = w
    
    def get_edge(self, u, v):
        return self._adjMatrix[u][v]
    
    def get_adjacent(self, v):
        let head = None
        let tail 
        
        if v > self._size - 1:
            error('out of bounds')
        
        for i in range(self._size):
            if not self._adjMatrix[v][i] == None:
                if head == None:
                    head = cons(i, None)
                    tail = head
                else:
                    let temp = cons(i, None)
                    tail.next = temp
                    tail = temp
        return head
    
    def get_all_edges(self):
        let head = None
        let tail 
        let visMatrix = vec(self._size)
        for i in range(self._size):
            visMatrix[i] = vec(self._size)
            
            
        for x in range(self._size):
            for y in range(self._size):
                if not self._adjMatrix[x][y] == None:
                    if head == None:
                        head = cons(WEdge(x, y, self._adjMatrix[x][y]), None)
                        tail = head
                        visMatrix[x][y] = True
                    elif not visMatrix[y][x] == True:
                        let temp = cons(WEdge(x, y, self._adjMatrix[x][y]), None)
                        tail.next = temp
                        tail = temp
                        visMatrix[x][y] = True        
        return head
        
        
test 'testing graph':
    let gr = WuGraph(6)
    assert gr.len() == 6
    gr.set_edge(0, 1, 2)
    gr.set_edge(1, 2, 3)
    gr.set_edge(1, 3, 5)
    gr.set_edge(3, 4, 10)
    gr.set_edge(0, 4, 12)
    gr.set_edge(3, 0, 15)
    gr.set_edge(2, 4, 32)
    gr.set_edge(0, 0, 39)
    assert gr.get_adjacent(5) == None
    gr.set_edge(5, 0, 3)
    gr.set_edge(5, 0, None)
    assert gr.get_adjacent(5) == None
    #gr.printHelp()
    assert gr.get_edge(0, 1) == 2
    assert gr.get_edge(1, 0) == 2
    assert gr.get_edge(4,1) == None
    assert_error gr.get_adjacent(10)
    let testNone = WuGraph(3)
    assert testNone.get_all_edges() == None
    
        

# Other methods you may need can go here.


###
### List helpers
###

# To test methods that return lists with elements in an unspecified
# order, you can use these functions for sorting. Sorting these lists
# will put their elements in a predictable order, order which you can
# use when writing down the expected result part of your tests.

# sort_vertices : ListOf[Vertex] -> ListOf[Vertex]
# Sorts a list of numbers.
def sort_vertices(lst: Cons.list?) -> Cons.list?:
    def vertex_lt?(u, v): return u < v
    return Cons.sort[Vertex?](vertex_lt?, lst)

# sort_edges : ListOf[WEdge] -> ListOf[WEdge]
# Sorts a list of weighted edges, lexicographically
# ASSUMPTION: There's no need to compare weights because
# the same edge can’t appear with different weights.
def sort_edges(lst: Cons.list?) -> Cons.list?:
    def edge_lt?(e1, e2):
        return e1.u < e2.u or (e1.u == e2.u and e1.v < e2.v)
    return Cons.sort[WEdge?](edge_lt?, lst)

###
### BUILDING GRAPHS
###

def example_graph() -> WuGraph?:
    let result = WuGraph(6) # 6-vertex graph from the assignment
    result.set_edge(0, 1, 12)
    result.set_edge(1, 2, 31)
    result.set_edge(1, 3, 56)
    result.set_edge(2, 4, -2)
    result.set_edge(2, 5, 7)
    result.set_edge(3, 5, 1)
    result.set_edge(3, 4, 9)
    
    return result

struct CityMap:
    let graph
    let city_name_to_node_id
    let node_id_to_city_name

def my_neck_of_the_woods():
    let co = WuGraph(6)
    co.set_edge(0, 1, 5)
    co.set_edge(0, 2, 5)
    co.set_edge(0, 3, 10)
    co.set_edge(1, 3, 15)
    co.set_edge(2, 3, 5)
    co.set_edge(0, 4, 20)
    co.set_edge(3, 5, 30)
    
    let nodeToName = HashTable(6, make_sbox_hash())
    nodeToName.put(0, "Lafayette")
    nodeToName.put(1, "Erie")
    nodeToName.put(2, "Louisville")
    nodeToName.put(3, "Boulder")
    nodeToName.put(4, "Longmont")
    nodeToName.put(5, "Nederland")
    
    let nameToNode = HashTable(6, make_sbox_hash())
    nameToNode.put("Lafayette", 0)
    nameToNode.put("Erie", 1)
    nameToNode.put("Louisville", 2)
    nameToNode.put("Boulder", 3)
    nameToNode.put("Longmont", 4)
    nameToNode.put("Nederland", 5)
    
    return CityMap(co, nameToNode, nodeToName)
    
test 'CityMap Test':
    let coMap = my_neck_of_the_woods()
    assert coMap.graph.get_edge(0, 1) == 5
    assert coMap.city_name_to_node_id.get("Boulder") == 3
    assert coMap.node_id_to_city_name.get(1) == "Erie"
    
    

###
### DFS
###

# dfs : WUGRAPH Vertex [Vertex -> any] -> None
# Performs a depth-first search starting at `start`, applying `f`
# to each vertex once as it is discovered by the search.
def dfs(graph: WUGRAPH!, start: Vertex?, f: FunC[Vertex?, AnyC]) -> NoneC:
    let visited = vec(graph.len())
    
    help(graph, start, visited, f)
    
    
def help(gr, i, vis, fun):
    vis[i] = True
    fun(i)
    
    
    while not gr.get_adjacent(i) == None:
        if gr.get_adjacent(i) == None:
            return
        elif vis[gr.get_adjacent(i).data]:
            let temp = gr.get_adjacent(i)
            while vis[temp.data] == True and not temp.next == None:
                temp = temp.next
            if not vis[temp.data]:
                help(gr, temp.data, vis, fun)
            else:
                return
        else:
            help(gr, gr.get_adjacent(i).data, vis, fun)
       

# dfs_to_list : WUGRAPH Vertex -> ListOf[Vertex]
# Performs a depth-first search starting at `start` and returns a
# list of all reachable vertices.
#
# This function uses your `dfs` function to build a list in the
# order of the search. It will pass the test below if your dfs visits
# each reachable vertex once, regardless of the order in which it calls
# `f` on them. However, you should test it more thoroughly than that
# to make sure it is calling `f` (and thus exploring the graph) in
# a correct order.
def dfs_to_list(graph: WUGRAPH!, start: Vertex?) -> VertexList?:
    let list = None
    # Add to the front when we visit a node
    dfs(graph, start, lambda new: list = cons(new, list))
    # Reverse to the get elements in visiting order.
    return Cons.rev(list)

###
### TESTING
###
    
test 'dfs tests':
    let gr = WuGraph(20)
    for i in range(200):
        gr.set_edge(random(20), random(20), i)
    
    Cons.to_vec(dfs_to_list(gr, 0))
    
    let g = WuGraph(5)
    g.set_edge(0, 1, 10)
    g.set_edge(1, 2, 10)
    g.set_edge(0, 3, 10)
    g.set_edge(3, 4, 10)
    
    Cons.to_vec(dfs_to_list(g, 0))
    
    
## You should test your code thoroughly. Here is one test to get you started:

test 'dfs_to_list(example_graph())':
     #Cons.from_vec is a convenience function from the `cons` library that
    # allows you to write a vector (using the nice vector syntax), and get
    # a linked list with the same elements.
    assert sort_vertices(dfs_to_list(example_graph(), 0)) \
        == Cons.from_vec([0, 1, 2, 3, 4, 5])
